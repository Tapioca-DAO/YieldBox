diff -ruN .gitignore .gitignore
--- .gitignore	1970-01-01 01:00:00
+++ .gitignore	2023-06-08 01:55:15
@@ -0,0 +1,2 @@
+*
+!.gitignore
\ No newline at end of file
diff -ruN ERC1155.sol ERC1155.sol
--- ERC1155.sol	2023-06-02 17:16:24
+++ ERC1155.sol	2023-06-08 01:54:50
@@ -61,7 +61,7 @@
         emit TransferSingle(msg.sender, from, to, id, value);
     }
 
-    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal virtual {
+    function _transferBatch(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {  // HARNESS: calldata -> memory
         require(to != address(0), "No 0 address");
 
         uint256 len = ids.length;
diff -ruN YieldBox.sol YieldBox.sol
--- YieldBox.sol	2023-06-02 17:16:24
+++ YieldBox.sol	2023-06-07 23:29:22
@@ -40,6 +40,8 @@
 import "./YieldBoxURIBuilder.sol";
 import "./YieldBoxPermit.sol";
 
+import "../harness/DummyBoringAddress.sol";        // HARNESS: added library from node_modules
+
 // solhint-disable no-empty-blocks
 
 /// @title YieldBox
@@ -51,7 +53,7 @@
     // ******************* //
     // *** CONSTRUCTOR *** //
     // ******************* //
-    using BoringAddress for address;
+    using DummyBoringAddress for address;        // HARNESS: BoringAddress -> DummyBoringAddress
     using BoringERC20 for IERC20;
     using BoringERC20 for IWrappedNative;
     using YieldBoxRebase for uint256;
@@ -85,7 +87,7 @@
     // ******************* //
     // *** CONSTRUCTOR *** //
     // ******************* //
-    IWrappedNative public immutable wrappedNative;
+    IWrappedNative public wrappedNative;   // HARNESS: removed immutable
     YieldBoxURIBuilder public immutable uriBuilder;
 
     constructor(IWrappedNative wrappedNative_, YieldBoxURIBuilder uriBuilder_) YieldBoxPermit("YieldBox") {
@@ -99,7 +101,7 @@
 
     /// @dev Returns the total balance of `token` the strategy contract holds,
     /// plus the total amount this contract thinks the strategy holds.
-    function _tokenBalanceOf(Asset storage asset) internal view returns (uint256 amount) {
+    function _tokenBalanceOf(Asset memory asset) public view returns (uint256 amount) {  // HARNESS: internal -> public, storage -> memory
         return asset.strategy.currentBalance();
     }
 
@@ -304,16 +306,20 @@
         _transferSingle(from, to, assetId, share);
     }
 
+    address[] public toes;
+    uint256[] public sharesGlobal;
+    uint256[] public assetIdsGlobal;
+
     function batchTransfer(address from, address to, uint256[] calldata assetIds_, uint256[] calldata shares_) public {
         uint256 len = assetIds_.length;
         for (uint256 i = 0; i < len; i++) {
             _requireTransferAllowed(from, isApprovedForAsset[from][msg.sender][assetIds_[i]]);
         }
 
-        _transferBatch(from, to, assetIds_, shares_);
+        _transferBatch(from, to, assetIdsGlobal, sharesGlobal);
     }
 
-    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal override {
+    function _transferBatch(address from, address to, uint256[] memory ids, uint256[] memory values) internal override {    // HARNESS: calldata -> memory
         require(to != address(0), "No 0 address");
 
         uint256 len = ids.length;
@@ -335,16 +341,16 @@
     /// @param shares The amount of `token` in shares for each receiver in `tos`.
     function transferMultiple(address from, address[] calldata tos, uint256 assetId, uint256[] calldata shares) public allowed(from, assetId) {
         // Checks
-        uint256 len = tos.length;
+        uint256 len = toes.length;
         for (uint256 i = 0; i < len; i++) {
-            require(tos[i] != address(0), "YieldBox: to not set"); // To avoid a bad UI from burning funds
+            require(toes[i] != address(0), "YieldBox: to not set"); // To avoid a bad UI from burning funds
         }
 
         // Effects
         uint256 _totalShares;
         for (uint256 i = 0; i < len; i++) {
-            address to = tos[i];
-            uint256 share_ = shares[i];
+            address to = toes[i];
+            uint256 share_ = sharesGlobal[i];
             balanceOf[to][assetId] += share_;
             _totalShares += share_;
             emit TransferSingle(msg.sender, from, to, assetId, share_);
diff -ruN strategies/SimpleMintStrategy.sol strategies/SimpleMintStrategy.sol
--- strategies/SimpleMintStrategy.sol	1970-01-01 01:00:00
+++ strategies/SimpleMintStrategy.sol	2023-06-07 23:29:22
@@ -0,0 +1,121 @@
+// SPDX-License-Identifier: MIT
+pragma solidity 0.8.9;
+// pragma experimental ABIEncoderV2;
+
+//TODO - replace this with our dummy?
+// import "@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol";
+// import "@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol";
+// import "@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol";
+// Maybe swap this to any other IERC20 - WE MUST, since those don't have mintable
+
+import "../enums/YieldBoxTokenType.sol";
+import "../interfaces/IStrategy.sol";
+import {BaseStrategy} from "./BaseStrategy.sol";
+
+
+// DUMMY INTERFAES - just what needed
+interface IERC20 {
+    function balanceOf(address _owner) external view returns (uint256 balance);
+    function transfer(address _to, uint256 _value) external returns (bool success);
+    function mint(address _to, uint256 _value) external returns (bool success);
+}
+
+interface IERC721 {
+    function ownerOf(uint256 _tokenId) external view returns (address);
+    function transferFrom(address _from, address _to, uint256 _tokenId) external;
+    // function mint
+}
+
+interface IERC1155 {
+    function balanceOf(address _owner, uint256 _id) external view returns (uint256);
+    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;
+    function mint(address _to, uint256 _id, uint256 _amount) external returns (bool success);
+}
+
+
+contract SimpleMintStrategy is BaseStrategy{
+    // A single token strategy that just mints more of the token for each deposit.
+    // This strategy assumes the token is mintable and that it is the minter for it.
+    // 
+    // This could simulate accumilated yields etc. 
+    // Note that this strategy should be used for a SINGLE token. It has no idea about other tokens than what it was constructed for.
+
+    TokenType public tokenType;
+    uint256 public tokenId;
+    address public tokenAddress;
+    uint256 public mintAmount; //Should this be immutable too?? #TODO
+    // uint256 public _balance;
+
+    constructor(IYieldBox _yieldBox, address _tokenAddress, TokenType _tokenType, uint256 _tokenId, uint256 _mintAmount) BaseStrategy(_yieldBox) {
+        tokenType = _tokenType;
+        tokenAddress = _tokenAddress;
+        tokenId = _tokenId; 
+        mintAmount = _mintAmount;
+    }
+
+    function contractAddress() public view returns (address) {
+        return tokenAddress;
+    }
+
+    function _currentBalance() internal view override returns (uint256 amount) {
+        // ERC20 just gets address
+        if (tokenType == TokenType.ERC20) {
+            return IERC20(tokenAddress).balanceOf(address(this));
+        }
+        else if (tokenType == TokenType.ERC721) {
+            return ((IERC721(tokenAddress).ownerOf(tokenId) == address(this)) ? 1 : 0);
+        }
+        // ERC1155 (and native?)
+        else {
+            return IERC1155(tokenAddress).balanceOf(address(this), tokenId);
+        }
+    }
+
+    function _mint() internal {
+        // MINT!!
+        if (tokenType == TokenType.ERC20) {
+            IERC20(tokenAddress).mint(address(this), mintAmount);
+        }
+        else if (tokenType == TokenType.ERC721) {
+            // DO NOTHING...?
+        }
+        // ERC1155 (and native?)
+        else {
+            IERC1155(tokenAddress).mint(address(this), tokenId, mintAmount);
+        }
+    }
+
+    // Public function to simulate reward generation
+    function getGains() public {
+        _mint();
+    }
+
+    function _deposited(uint256 amount) internal override {
+        amount = 0; //silence a warning
+        // _mint();
+    }
+
+    function _withdraw(address to, uint256 amount) internal override {        
+        //// TODO: maybe should mint here as well? (copy mint block?)
+        // _mint();
+        
+        if (tokenType == TokenType.ERC20) {
+            IERC20(tokenAddress).transfer(to, amount);
+        }
+        else if (tokenType == TokenType.ERC721) {
+            IERC721(tokenAddress).transferFrom(address(this), to, tokenId);
+        }
+        // ERC1155 (and native?)
+        else {
+            IERC1155(tokenAddress).safeTransferFrom(address(this), to, tokenId, amount, "");
+        }        
+    }
+
+    function description() external pure returns (string memory description_) {
+        return "A simple mint-based strategy. MOCK CONTRACT";
+    }
+
+    function name() external pure returns (string memory name_) {
+        return "SimpleMintStrategy";
+    }
+}
diff -ruN strategies/SimpleMintStrategyAdditional.sol strategies/SimpleMintStrategyAdditional.sol
--- strategies/SimpleMintStrategyAdditional.sol	1970-01-01 01:00:00
+++ strategies/SimpleMintStrategyAdditional.sol	2023-06-07 23:29:22
@@ -0,0 +1,121 @@
+// SPDX-License-Identifier: MIT
+pragma solidity 0.8.9;
+// pragma experimental ABIEncoderV2;
+
+//TODO - replace this with our dummy?
+// import "@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol";
+// import "@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol";
+// import "@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol";
+// Maybe swap this to any other IERC20 - WE MUST, since those don't have mintable
+
+import "../enums/YieldBoxTokenType.sol";
+import "../interfaces/IStrategy.sol";
+import {BaseStrategy} from "./BaseStrategy.sol";
+
+
+// DUMMY INTERFAES - just what needed
+interface IERC20 {
+    function balanceOf(address _owner) external view returns (uint256 balance);
+    function transfer(address _to, uint256 _value) external returns (bool success);
+    function mint(address _to, uint256 _value) external returns (bool success);
+}
+
+interface IERC721 {
+    function ownerOf(uint256 _tokenId) external view returns (address);
+    function transferFrom(address _from, address _to, uint256 _tokenId) external;
+    // function mint
+}
+
+interface IERC1155 {
+    function balanceOf(address _owner, uint256 _id) external view returns (uint256);
+    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;
+    function mint(address _to, uint256 _id, uint256 _amount) external returns (bool success);
+}
+
+
+contract SimpleMintStrategyAdditional is BaseStrategy{
+    // A single token strategy that just mints more of the token for each deposit.
+    // This strategy assumes the token is mintable and that it is the minter for it.
+    // 
+    // This could simulate accumilated yields etc. 
+    // Note that this strategy should be used for a SINGLE token. It has no idea about other tokens than what it was constructed for.
+
+    TokenType public tokenType;
+    uint256 public tokenId;
+    address public tokenAddress;
+    uint256 public mintAmount; //Should this be immutable too?? #TODO
+    // uint256 public _balance;
+
+    constructor(IYieldBox _yieldBox, address _tokenAddress, TokenType _tokenType, uint256 _tokenId, uint256 _mintAmount) BaseStrategy(_yieldBox) {
+        tokenType = _tokenType;
+        tokenAddress = _tokenAddress;
+        tokenId = _tokenId; 
+        mintAmount = _mintAmount;
+    }
+
+    function contractAddress() public view returns (address) {
+        return tokenAddress;
+    }
+
+    function _currentBalance() internal view override returns (uint256 amount) {
+        // ERC20 just gets address
+        if (tokenType == TokenType.ERC20) {
+            return IERC20(tokenAddress).balanceOf(address(this));
+        }
+        else if (tokenType == TokenType.ERC721) {
+            return ((IERC721(tokenAddress).ownerOf(tokenId) == address(this)) ? 1 : 0);
+        }
+        // ERC1155 (and native?)
+        else {
+            return IERC1155(tokenAddress).balanceOf(address(this), tokenId);
+        }
+    }
+
+    function _mint() internal {
+        // MINT!!
+        if (tokenType == TokenType.ERC20) {
+            IERC20(tokenAddress).mint(address(this), mintAmount);
+        }
+        else if (tokenType == TokenType.ERC721) {
+            // DO NOTHING...?
+        }
+        // ERC1155 (and native?)
+        else {
+            IERC1155(tokenAddress).mint(address(this), tokenId, mintAmount);
+        }
+    }
+
+    // Public function to simulate reward generation
+    function getGains() public {
+        _mint();
+    }
+
+    function _deposited(uint256 amount) internal override {
+        amount = 0; //silence a warning
+        // _mint();
+    }
+
+    function _withdraw(address to, uint256 amount) internal override {        
+        //// TODO: maybe should mint here as well? (copy mint block?)
+        // _mint();
+        
+        if (tokenType == TokenType.ERC20) {
+            IERC20(tokenAddress).transfer(to, amount);
+        }
+        else if (tokenType == TokenType.ERC721) {
+            IERC721(tokenAddress).transferFrom(address(this), to, tokenId);
+        }
+        // ERC1155 (and native?)
+        else {
+            IERC1155(tokenAddress).safeTransferFrom(address(this), to, tokenId, amount, "");
+        }        
+    }
+
+    function description() external pure returns (string memory description_) {
+        return "A simple mint-based strategy. MOCK CONTRACT";
+    }
+
+    function name() external pure returns (string memory name_) {
+        return "SimpleMintStrategy";
+    }
+}
